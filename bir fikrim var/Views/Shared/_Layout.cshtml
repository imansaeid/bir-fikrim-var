@{
 
    Layout = null;
    var userId = Context.Session.GetInt32("UserId");
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BirFikrimVar</title>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootswatch/5.3.0/sketchy/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

    <link rel="stylesheet" href="~/css/Bootstrap.css" />

    <style>
        /* This container allows the results list to be positioned relative to it. */
        #search-container {
            position: relative;
        }

        /* This styles the dropdown list for search results. */
        #user-search-results {
            position: absolute; /* Positions it right below the search bar */
            top: 100%;
            left: 0;
            right: 0;
            z-index: 1000; /* Ensures it appears above other content */
            border-top: none;
            border-radius: 0 0 0.375rem 0.375rem;
            max-height: 300px; /* Limits the height of the results list */
            overflow-y: auto; /* Adds a scrollbar if there are many results */
        }
    </style>
</head>
<body>
    <!-- Main Navigation Bar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <!-- Brand Logo/Link -->
            <a class="navbar-brand" asp-controller="Home" asp-action="Index">
                <img src="/images/innovation.png" alt="BirFikrimVar" width="70" height="60">
            </a>
            <div class="collapse navbar-collapse">

                <!-- This C# code block checks if the userId has a value (i.e., user is logged in) -->
                @if (userId.HasValue)
                {
                    <!-- If the user is logged in, this search bar is rendered -->
                    <div id="search-container" class="mx-auto" style="width: 400px;">
                        <input class="form-control" type="search" placeholder="Search users..." id="user-search-input" autocomplete="off">
                        <div id="user-search-results" class="list-group"></div>
                    </div>
                }

                <!-- Login/Logout partial view is always shown on the right -->
                <ul class="navbar-nav ms-auto">
                    @await Html.PartialAsync("_LoginPartial")
                </ul>
            </div>
        </div>
    </nav>

    <!-- This is where the content of individual pages will be rendered -->
    <div class="container mt-4">
        @RenderBody()
    </div>

    <!-- JavaScript files -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Custom JavaScript for the live search functionality -->
    <script>
        const searchInput = document.getElementById('user-search-input');
        const searchResults = document.getElementById('user-search-results');
        let debounceTimer; // This timer is used to delay the search API call

        // Only run this script if the search input element exists on the page
        if (searchInput) {
            // This event fires every time the user types a character
            searchInput.addEventListener('input', e => {
                const term = e.target.value.trim();

                // Clear the previous timer to reset the delay
                clearTimeout(debounceTimer);

                // If the search box is empty, clear the results and hide the border
                if (term.length === 0) {
                    searchResults.innerHTML = '';
                    searchResults.classList.remove('border');
                    return;
                }

                // Set a new timer. The search will only run after the user stops typing for 300ms.
                debounceTimer = setTimeout(() => {
                    fetchUsers(term);
                }, 300);
            });

            // Add a click listener to the whole document to hide results when clicking outside the search area
            document.addEventListener('click', (e) => {
                if (!document.getElementById('search-container').contains(e.target)) {
                    searchResults.innerHTML = '';
                    searchResults.classList.remove('border');
                }
            });
        }

        // Asynchronous function to fetch user data from your backend API
        async function fetchUsers(term) {
            try {
                // IMPORTANT: This assumes you have an API endpoint at this URL
                const response = await fetch(`/api/UsersApi/search?term=${encodeURIComponent(term)}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const users = await response.json(); // Parse the JSON response
                displayUsers(users); // Call the function to display the results
            } catch (error) {
                console.error('Failed to fetch users:', error);
                searchResults.innerHTML = '<div class="list-group-item">Failed to load results.</div>';
                searchResults.classList.add('border');
            }
        }

        // Function to render the list of users in the search results container
        function displayUsers(users) {
            searchResults.innerHTML = ''; // Clear any old results

            if (users.length === 0) {
                searchResults.innerHTML = '<div class="list-group-item disabled">No users found.</div>';
            } else {
                users.forEach(user => {
                    const userElement = document.createElement('a');
                    // This uses Razor syntax within JavaScript to generate the correct URL for each user's profile
                    userElement.href = '@Url.Action("Profile", "Users")/' + user.id;
                    userElement.className = 'list-group-item list-group-item-action';

                    // Set the inner HTML of the link with user's name and username
                    userElement.innerHTML = `
                        <div>${user.name}</div>
                        <small class="text-muted">${user.username}</small>
                    `;
                    searchResults.appendChild(userElement);
                });
            }
            // Show the border around the results list
            searchResults.classList.add('border');
        }
    </script>

    @RenderSection("Scripts", required: false)
</body>
</html>
